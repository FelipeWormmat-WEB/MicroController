;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 9/3/2024 7:45:30 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EFF9  	GOTO        498
_interrupt:
;contador24Hrs.c,124 :: 		void interrupt(){
0x0008	0xF015C000  	MOVFF       R0, 21
;contador24Hrs.c,125 :: 		if(tmr0if_bit == 1){
0x000C	0xA4F2      	BTFSS       TMR0IF_bit, BitPos(TMR0IF_bit+0) 
0x000E	0xD00C      	BRA         L_interrupt43
;contador24Hrs.c,126 :: 		tmr0if_bit = 0;//desliga o sinalizador do tmr0
0x0010	0x94F2      	BCF         TMR0IF_bit, BitPos(TMR0IF_bit+0) 
;contador24Hrs.c,127 :: 		conta_interrupcao ++;
0x0012	0x2A1A      	INCF        _conta_interrupcao, 1 
;contador24Hrs.c,128 :: 		if(conta_interrupcao == 30){
0x0014	0x501A      	MOVF        _conta_interrupcao, 0 
0x0016	0x0A1E      	XORLW       30
0x0018	0xE107      	BNZ         L_interrupt44
;contador24Hrs.c,130 :: 		conta_interrupcao = 0;
0x001A	0x6A1A      	CLRF        _conta_interrupcao 
;contador24Hrs.c,131 :: 		segundo ++;
0x001C	0x2A19      	INCF        _segundo, 1 
;contador24Hrs.c,132 :: 		if(segundo == 60){
0x001E	0x5019      	MOVF        _segundo, 0 
0x0020	0x0A3C      	XORLW       60
0x0022	0xE102      	BNZ         L_interrupt45
;contador24Hrs.c,133 :: 		segundo = 0;
0x0024	0x6A19      	CLRF        _segundo 
;contador24Hrs.c,134 :: 		unidade ++;
0x0026	0x2A18      	INCF        _unidade, 1 
;contador24Hrs.c,135 :: 		}
L_interrupt45:
;contador24Hrs.c,136 :: 		}
L_interrupt44:
;contador24Hrs.c,137 :: 		}
L_interrupt43:
;contador24Hrs.c,138 :: 		if(int0if_bit == 1){//ocorreu emergencia
0x0028	0xA2F2      	BTFSS       INT0IF_bit, BitPos(INT0IF_bit+0) 
0x002A	0xD005      	BRA         L_interrupt46
;contador24Hrs.c,139 :: 		int0if_bit = 0;//desliga o sinalizador de emergencia
0x002C	0x92F2      	BCF         INT0IF_bit, BitPos(INT0IF_bit+0) 
;contador24Hrs.c,140 :: 		unidade = 0;
0x002E	0x6A18      	CLRF        _unidade 
;contador24Hrs.c,141 :: 		dezena = 0;
0x0030	0x6A17      	CLRF        _dezena 
;contador24Hrs.c,142 :: 		centena = 0;
0x0032	0x6A16      	CLRF        _centena 
;contador24Hrs.c,143 :: 		milhar = 0;
0x0034	0x6A1B      	CLRF        _milhar 
;contador24Hrs.c,144 :: 		}
L_interrupt46:
;contador24Hrs.c,145 :: 		}
L_end_interrupt:
L__interrupt56:
0x0036	0xF000C015  	MOVFF       21, R0
0x003A	0x0011      	RETFIE      1
; end of _interrupt
_decodifica:
;contador24Hrs.c,109 :: 		char decodifica(char entrada){
;contador24Hrs.c,111 :: 		if(entrada == 0)saida = 63;else
0x003C	0x501C      	MOVF        FARG_decodifica_entrada, 0 
0x003E	0x0A00      	XORLW       0
0x0040	0xE103      	BNZ         L_decodifica25
0x0042	0x0E3F      	MOVLW       63
0x0044	0x6E01      	MOVWF       R1 
0x0046	0xD032      	BRA         L_decodifica26
L_decodifica25:
;contador24Hrs.c,112 :: 		if(entrada == 1)saida = 6;else
0x0048	0x501C      	MOVF        FARG_decodifica_entrada, 0 
0x004A	0x0A01      	XORLW       1
0x004C	0xE103      	BNZ         L_decodifica27
0x004E	0x0E06      	MOVLW       6
0x0050	0x6E01      	MOVWF       R1 
0x0052	0xD02C      	BRA         L_decodifica28
L_decodifica27:
;contador24Hrs.c,113 :: 		if(entrada == 2)saida = 91;else
0x0054	0x501C      	MOVF        FARG_decodifica_entrada, 0 
0x0056	0x0A02      	XORLW       2
0x0058	0xE103      	BNZ         L_decodifica29
0x005A	0x0E5B      	MOVLW       91
0x005C	0x6E01      	MOVWF       R1 
0x005E	0xD026      	BRA         L_decodifica30
L_decodifica29:
;contador24Hrs.c,114 :: 		if(entrada == 3)saida = 79;else
0x0060	0x501C      	MOVF        FARG_decodifica_entrada, 0 
0x0062	0x0A03      	XORLW       3
0x0064	0xE103      	BNZ         L_decodifica31
0x0066	0x0E4F      	MOVLW       79
0x0068	0x6E01      	MOVWF       R1 
0x006A	0xD020      	BRA         L_decodifica32
L_decodifica31:
;contador24Hrs.c,115 :: 		if(entrada == 4)saida = 102;else
0x006C	0x501C      	MOVF        FARG_decodifica_entrada, 0 
0x006E	0x0A04      	XORLW       4
0x0070	0xE103      	BNZ         L_decodifica33
0x0072	0x0E66      	MOVLW       102
0x0074	0x6E01      	MOVWF       R1 
0x0076	0xD01A      	BRA         L_decodifica34
L_decodifica33:
;contador24Hrs.c,116 :: 		if(entrada == 5)saida = 109;else
0x0078	0x501C      	MOVF        FARG_decodifica_entrada, 0 
0x007A	0x0A05      	XORLW       5
0x007C	0xE103      	BNZ         L_decodifica35
0x007E	0x0E6D      	MOVLW       109
0x0080	0x6E01      	MOVWF       R1 
0x0082	0xD014      	BRA         L_decodifica36
L_decodifica35:
;contador24Hrs.c,117 :: 		if(entrada == 6)saida = 125;else
0x0084	0x501C      	MOVF        FARG_decodifica_entrada, 0 
0x0086	0x0A06      	XORLW       6
0x0088	0xE103      	BNZ         L_decodifica37
0x008A	0x0E7D      	MOVLW       125
0x008C	0x6E01      	MOVWF       R1 
0x008E	0xD00E      	BRA         L_decodifica38
L_decodifica37:
;contador24Hrs.c,118 :: 		if(entrada == 7)saida = 7;else
0x0090	0x501C      	MOVF        FARG_decodifica_entrada, 0 
0x0092	0x0A07      	XORLW       7
0x0094	0xE103      	BNZ         L_decodifica39
0x0096	0x0E07      	MOVLW       7
0x0098	0x6E01      	MOVWF       R1 
0x009A	0xD008      	BRA         L_decodifica40
L_decodifica39:
;contador24Hrs.c,119 :: 		if(entrada == 8)saida = 127;
0x009C	0x501C      	MOVF        FARG_decodifica_entrada, 0 
0x009E	0x0A08      	XORLW       8
0x00A0	0xE103      	BNZ         L_decodifica41
0x00A2	0x0E7F      	MOVLW       127
0x00A4	0x6E01      	MOVWF       R1 
0x00A6	0xD002      	BRA         L_decodifica42
L_decodifica41:
;contador24Hrs.c,120 :: 		else saida = 111;
0x00A8	0x0E6F      	MOVLW       111
0x00AA	0x6E01      	MOVWF       R1 
L_decodifica42:
L_decodifica40:
L_decodifica38:
L_decodifica36:
L_decodifica34:
L_decodifica32:
L_decodifica30:
L_decodifica28:
L_decodifica26:
;contador24Hrs.c,121 :: 		return(saida);
0x00AC	0xF000C001  	MOVFF       R1, R0
;contador24Hrs.c,122 :: 		}
L_end_decodifica:
0x00B0	0x0012      	RETURN      0
; end of _decodifica
_escreve_display:
;contador24Hrs.c,87 :: 		void escreve_display(){
;contador24Hrs.c,88 :: 		portb = 0;
0x00B2	0x6A81      	CLRF        PORTB 
;contador24Hrs.c,89 :: 		portd = decodifica(unidade);
0x00B4	0xF01CC018  	MOVFF       _unidade, FARG_decodifica_entrada
0x00B8	0xDFC1      	RCALL       _decodifica
0x00BA	0xFF83C000  	MOVFF       R0, PORTD
;contador24Hrs.c,90 :: 		rb4_bit = 1;
0x00BE	0x8881      	BSF         RB4_bit, BitPos(RB4_bit+0) 
;contador24Hrs.c,91 :: 		delay_ms(1);
0x00C0	0x0E07      	MOVLW       7
0x00C2	0x6E0C      	MOVWF       R12, 0
0x00C4	0x0E7D      	MOVLW       125
0x00C6	0x6E0D      	MOVWF       R13, 0
L_escreve_display20:
0x00C8	0x2E0D      	DECFSZ      R13, 1, 0
0x00CA	0xD7FE      	BRA         L_escreve_display20
0x00CC	0x2E0C      	DECFSZ      R12, 1, 0
0x00CE	0xD7FC      	BRA         L_escreve_display20
;contador24Hrs.c,93 :: 		rb4_bit = 0;//desliga a unidade
0x00D0	0x9881      	BCF         RB4_bit, BitPos(RB4_bit+0) 
;contador24Hrs.c,94 :: 		portd = decodifica(dezena);
0x00D2	0xF01CC017  	MOVFF       _dezena, FARG_decodifica_entrada
0x00D6	0xDFB2      	RCALL       _decodifica
0x00D8	0xFF83C000  	MOVFF       R0, PORTD
;contador24Hrs.c,95 :: 		rb5_bit = 1;//liga a dezena
0x00DC	0x8A81      	BSF         RB5_bit, BitPos(RB5_bit+0) 
;contador24Hrs.c,96 :: 		delay_ms(1);
0x00DE	0x0E07      	MOVLW       7
0x00E0	0x6E0C      	MOVWF       R12, 0
0x00E2	0x0E7D      	MOVLW       125
0x00E4	0x6E0D      	MOVWF       R13, 0
L_escreve_display21:
0x00E6	0x2E0D      	DECFSZ      R13, 1, 0
0x00E8	0xD7FE      	BRA         L_escreve_display21
0x00EA	0x2E0C      	DECFSZ      R12, 1, 0
0x00EC	0xD7FC      	BRA         L_escreve_display21
;contador24Hrs.c,98 :: 		rb5_bit = 0;//desliga a dezena
0x00EE	0x9A81      	BCF         RB5_bit, BitPos(RB5_bit+0) 
;contador24Hrs.c,99 :: 		portd = decodifica(centena);
0x00F0	0xF01CC016  	MOVFF       _centena, FARG_decodifica_entrada
0x00F4	0xDFA3      	RCALL       _decodifica
0x00F6	0xFF83C000  	MOVFF       R0, PORTD
;contador24Hrs.c,100 :: 		if(conta_interrupcao > 15) portd = portd + 128;
0x00FA	0x501A      	MOVF        _conta_interrupcao, 0 
0x00FC	0x080F      	SUBLW       15
0x00FE	0xE202      	BC          L_escreve_display22
0x0100	0x0E80      	MOVLW       128
0x0102	0x2683      	ADDWF       PORTD, 1 
L_escreve_display22:
;contador24Hrs.c,101 :: 		rb6_bit = 1;//liga a centena
0x0104	0x8C81      	BSF         RB6_bit, BitPos(RB6_bit+0) 
;contador24Hrs.c,102 :: 		delay_ms(1);
0x0106	0x0E07      	MOVLW       7
0x0108	0x6E0C      	MOVWF       R12, 0
0x010A	0x0E7D      	MOVLW       125
0x010C	0x6E0D      	MOVWF       R13, 0
L_escreve_display23:
0x010E	0x2E0D      	DECFSZ      R13, 1, 0
0x0110	0xD7FE      	BRA         L_escreve_display23
0x0112	0x2E0C      	DECFSZ      R12, 1, 0
0x0114	0xD7FC      	BRA         L_escreve_display23
;contador24Hrs.c,104 :: 		rb6_bit = 0;//desliga a centena
0x0116	0x9C81      	BCF         RB6_bit, BitPos(RB6_bit+0) 
;contador24Hrs.c,105 :: 		portd = decodifica(milhar);
0x0118	0xF01CC01B  	MOVFF       _milhar, FARG_decodifica_entrada
0x011C	0xDF8F      	RCALL       _decodifica
0x011E	0xFF83C000  	MOVFF       R0, PORTD
;contador24Hrs.c,106 :: 		rb7_bit = 1;
0x0122	0x8E81      	BSF         RB7_bit, BitPos(RB7_bit+0) 
;contador24Hrs.c,107 :: 		delay_ms(1);
0x0124	0x0E07      	MOVLW       7
0x0126	0x6E0C      	MOVWF       R12, 0
0x0128	0x0E7D      	MOVLW       125
0x012A	0x6E0D      	MOVWF       R13, 0
L_escreve_display24:
0x012C	0x2E0D      	DECFSZ      R13, 1, 0
0x012E	0xD7FE      	BRA         L_escreve_display24
0x0130	0x2E0C      	DECFSZ      R12, 1, 0
0x0132	0xD7FC      	BRA         L_escreve_display24
;contador24Hrs.c,108 :: 		}
L_end_escreve_display:
0x0134	0x0012      	RETURN      0
; end of _escreve_display
_ajuste:
;contador24Hrs.c,25 :: 		void ajuste(){
;contador24Hrs.c,26 :: 		if(rb2_bit == 0) {
0x0136	0xB481      	BTFSC       RB2_bit, BitPos(RB2_bit+0) 
0x0138	0xD00E      	BRA         L_ajuste2
;contador24Hrs.c,27 :: 		while(rb2_bit == 0)escreve_display();
L_ajuste3:
0x013A	0xB481      	BTFSC       RB2_bit, BitPos(RB2_bit+0) 
0x013C	0xD002      	BRA         L_ajuste4
0x013E	0xDFB9      	RCALL       _escreve_display
0x0140	0xD7FC      	BRA         L_ajuste3
L_ajuste4:
;contador24Hrs.c,28 :: 		unidade ++;
0x0142	0x2A18      	INCF        _unidade, 1 
;contador24Hrs.c,29 :: 		if(unidade == 10){
0x0144	0x5018      	MOVF        _unidade, 0 
0x0146	0x0A0A      	XORLW       10
0x0148	0xE102      	BNZ         L_ajuste5
;contador24Hrs.c,30 :: 		unidade = 0;
0x014A	0x6A18      	CLRF        _unidade 
;contador24Hrs.c,31 :: 		dezena ++;
0x014C	0x2A17      	INCF        _dezena, 1 
;contador24Hrs.c,32 :: 		}
L_ajuste5:
;contador24Hrs.c,33 :: 		if(dezena == 6){
0x014E	0x5017      	MOVF        _dezena, 0 
0x0150	0x0A06      	XORLW       6
0x0152	0xB4D8      	BTFSC       STATUS, 2 
;contador24Hrs.c,34 :: 		dezena = 0;
0x0154	0x6A17      	CLRF        _dezena 
;contador24Hrs.c,35 :: 		}
L_ajuste6:
;contador24Hrs.c,36 :: 		}
L_ajuste2:
;contador24Hrs.c,37 :: 		if(rb1_bit == 0){
0x0156	0xB281      	BTFSC       RB1_bit, BitPos(RB1_bit+0) 
0x0158	0xD00A      	BRA         L_ajuste7
;contador24Hrs.c,38 :: 		while(rb1_bit == 0)escreve_display();
L_ajuste8:
0x015A	0xB281      	BTFSC       RB1_bit, BitPos(RB1_bit+0) 
0x015C	0xD002      	BRA         L_ajuste9
0x015E	0xDFA9      	RCALL       _escreve_display
0x0160	0xD7FC      	BRA         L_ajuste8
L_ajuste9:
;contador24Hrs.c,39 :: 		centena ++;
0x0162	0x2A16      	INCF        _centena, 1 
;contador24Hrs.c,40 :: 		if(centena == 10){
0x0164	0x5016      	MOVF        _centena, 0 
0x0166	0x0A0A      	XORLW       10
0x0168	0xE102      	BNZ         L_ajuste10
;contador24Hrs.c,41 :: 		centena = 0;
0x016A	0x6A16      	CLRF        _centena 
;contador24Hrs.c,42 :: 		milhar ++;
0x016C	0x2A1B      	INCF        _milhar, 1 
;contador24Hrs.c,43 :: 		}
L_ajuste10:
;contador24Hrs.c,44 :: 		}
L_ajuste7:
;contador24Hrs.c,45 :: 		if((milhar == 2)&&(centena == 4)){
0x016E	0x501B      	MOVF        _milhar, 0 
0x0170	0x0A02      	XORLW       2
0x0172	0xE105      	BNZ         L_ajuste13
0x0174	0x5016      	MOVF        _centena, 0 
0x0176	0x0A04      	XORLW       4
0x0178	0xE102      	BNZ         L_ajuste13
L__ajuste47:
;contador24Hrs.c,46 :: 		centena = 0;
0x017A	0x6A16      	CLRF        _centena 
;contador24Hrs.c,47 :: 		milhar = 0;
0x017C	0x6A1B      	CLRF        _milhar 
;contador24Hrs.c,48 :: 		}
L_ajuste13:
;contador24Hrs.c,49 :: 		}
L_end_ajuste:
0x017E	0x0012      	RETURN      0
; end of _ajuste
_crescente:
;contador24Hrs.c,50 :: 		void crescente(){
;contador24Hrs.c,51 :: 		if (unidade == 10) {
0x0180	0x5018      	MOVF        _unidade, 0 
0x0182	0x0A0A      	XORLW       10
0x0184	0xE102      	BNZ         L_crescente14
;contador24Hrs.c,52 :: 		unidade = 0;
0x0186	0x6A18      	CLRF        _unidade 
;contador24Hrs.c,53 :: 		dezena ++;
0x0188	0x2A17      	INCF        _dezena, 1 
;contador24Hrs.c,54 :: 		}
L_crescente14:
;contador24Hrs.c,55 :: 		if (dezena == 6) {
0x018A	0x5017      	MOVF        _dezena, 0 
0x018C	0x0A06      	XORLW       6
0x018E	0xE102      	BNZ         L_crescente15
;contador24Hrs.c,56 :: 		dezena = 0;
0x0190	0x6A17      	CLRF        _dezena 
;contador24Hrs.c,57 :: 		centena ++;
0x0192	0x2A16      	INCF        _centena, 1 
;contador24Hrs.c,58 :: 		}
L_crescente15:
;contador24Hrs.c,59 :: 		if (centena == 10) {
0x0194	0x5016      	MOVF        _centena, 0 
0x0196	0x0A0A      	XORLW       10
0x0198	0xE102      	BNZ         L_crescente16
;contador24Hrs.c,60 :: 		centena = 0;
0x019A	0x6A16      	CLRF        _centena 
;contador24Hrs.c,61 :: 		milhar ++;
0x019C	0x2A1B      	INCF        _milhar, 1 
;contador24Hrs.c,62 :: 		}
L_crescente16:
;contador24Hrs.c,63 :: 		if((milhar == 2)&&(centena == 4)){
0x019E	0x501B      	MOVF        _milhar, 0 
0x01A0	0x0A02      	XORLW       2
0x01A2	0xE105      	BNZ         L_crescente19
0x01A4	0x5016      	MOVF        _centena, 0 
0x01A6	0x0A04      	XORLW       4
0x01A8	0xE102      	BNZ         L_crescente19
L__crescente48:
;contador24Hrs.c,64 :: 		centena = 0;
0x01AA	0x6A16      	CLRF        _centena 
;contador24Hrs.c,65 :: 		milhar = 0;
0x01AC	0x6A1B      	CLRF        _milhar 
;contador24Hrs.c,66 :: 		}
L_crescente19:
;contador24Hrs.c,67 :: 		}
L_end_crescente:
0x01AE	0x0012      	RETURN      0
; end of _crescente
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x01B0	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x01B2	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x01B6	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x01B8	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x01BA	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x01BC	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x01BE	0x0012      	RETURN      0
; end of ___CC2DW
_setup_inicial:
;contador24Hrs.c,68 :: 		void setup_inicial(){
;contador24Hrs.c,69 :: 		porta = 0;
0x01C0	0x6A80      	CLRF        PORTA 
;contador24Hrs.c,70 :: 		trisa = 0;
0x01C2	0x6A92      	CLRF        TRISA 
;contador24Hrs.c,71 :: 		portb = 0;
0x01C4	0x6A81      	CLRF        PORTB 
;contador24Hrs.c,72 :: 		trisb = 7;//rb1 e rb2 como entrada
0x01C6	0x0E07      	MOVLW       7
0x01C8	0x6E93      	MOVWF       TRISB 
;contador24Hrs.c,73 :: 		portc = 0;
0x01CA	0x6A82      	CLRF        PORTC 
;contador24Hrs.c,74 :: 		trisc = 0;
0x01CC	0x6A94      	CLRF        TRISC 
;contador24Hrs.c,75 :: 		portd = 0;
0x01CE	0x6A83      	CLRF        PORTD 
;contador24Hrs.c,76 :: 		trisd = 0;
0x01D0	0x6A95      	CLRF        TRISD 
;contador24Hrs.c,77 :: 		porte = 0;
0x01D2	0x6A84      	CLRF        PORTE 
;contador24Hrs.c,78 :: 		trise = 0;
0x01D4	0x6A96      	CLRF        TRISE 
;contador24Hrs.c,79 :: 		adcon1 = 15;//configura como portas digitais
0x01D6	0x0E0F      	MOVLW       15
0x01D8	0x6EC1      	MOVWF       ADCON1 
;contador24Hrs.c,80 :: 		cmcon = 7;//desliga os comparadores
0x01DA	0x0E07      	MOVLW       7
0x01DC	0x6EB4      	MOVWF       CMCON 
;contador24Hrs.c,81 :: 		intcon2 = 0;//liga resistor pull up do portb
0x01DE	0x6AF1      	CLRF        INTCON2 
;contador24Hrs.c,82 :: 		unidade = 3;
0x01E0	0x0E03      	MOVLW       3
0x01E2	0x6E18      	MOVWF       _unidade 
;contador24Hrs.c,83 :: 		dezena = 2;
0x01E4	0x0E02      	MOVLW       2
0x01E6	0x6E17      	MOVWF       _dezena 
;contador24Hrs.c,84 :: 		centena = 9;
0x01E8	0x0E09      	MOVLW       9
0x01EA	0x6E16      	MOVWF       _centena 
;contador24Hrs.c,85 :: 		milhar = 1;
0x01EC	0x0E01      	MOVLW       1
0x01EE	0x6E1B      	MOVWF       _milhar 
;contador24Hrs.c,86 :: 		}
L_end_setup_inicial:
0x01F0	0x0012      	RETURN      0
; end of _setup_inicial
_main:
0x01F2	0x6A16      	CLRF        _centena 
0x01F4	0x6A17      	CLRF        _dezena 
0x01F6	0x6A18      	CLRF        _unidade 
0x01F8	0x6A19      	CLRF        _segundo 
0x01FA	0x6A1A      	CLRF        _conta_interrupcao 
0x01FC	0x6A1B      	CLRF        _milhar 
;contador24Hrs.c,12 :: 		void main() {
;contador24Hrs.c,13 :: 		setup_inicial();
0x01FE	0xDFE0      	RCALL       _setup_inicial
;contador24Hrs.c,14 :: 		t0con = 199;//liga o tmr0
0x0200	0x0EC7      	MOVLW       199
0x0202	0x6ED5      	MOVWF       T0CON 
;contador24Hrs.c,15 :: 		intcon = 0;//desliga todas as interrrup??es
0x0204	0x6AF2      	CLRF        INTCON 
;contador24Hrs.c,16 :: 		tmr0ie_bit = 1;//liga a interrup??o do tmr0
0x0206	0x8AF2      	BSF         TMR0IE_bit, BitPos(TMR0IE_bit+0) 
;contador24Hrs.c,17 :: 		int0ie_bit = 1;//liga interrupcao do pino RB0
0x0208	0x88F2      	BSF         INT0IE_bit, BitPos(INT0IE_bit+0) 
;contador24Hrs.c,18 :: 		gie_bit = 1;//liga o sistema de interrup??es
0x020A	0x8EF2      	BSF         GIE_bit, BitPos(GIE_bit+0) 
;contador24Hrs.c,19 :: 		while(1){
L_main0:
;contador24Hrs.c,20 :: 		escreve_display();
0x020C	0xDF52      	RCALL       _escreve_display
;contador24Hrs.c,21 :: 		crescente();
0x020E	0xDFB8      	RCALL       _crescente
;contador24Hrs.c,22 :: 		ajuste();
0x0210	0xDF92      	RCALL       _ajuste
;contador24Hrs.c,23 :: 		}
0x0212	0xD7FC      	BRA         L_main0
;contador24Hrs.c,24 :: 		}
L_end_main:
0x0214	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008      [52]    _interrupt
0x003C     [118]    _decodifica
0x00B2     [132]    _escreve_display
0x0136      [74]    _ajuste
0x0180      [48]    _crescente
0x01B0      [16]    ___CC2DW
0x01C0      [50]    _setup_inicial
0x01F2      [36]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    decodifica_saida_L0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0016       [1]    _centena
0x0017       [1]    _dezena
0x0018       [1]    _unidade
0x0019       [1]    _segundo
0x001A       [1]    _conta_interrupcao
0x001B       [1]    _milhar
0x001C       [1]    FARG_decodifica_entrada
0x0F80       [1]    PORTA
0x0F81       [0]    RB5_bit
0x0F81       [0]    RB4_bit
0x0F81       [0]    RB7_bit
0x0F81       [0]    RB6_bit
0x0F81       [1]    PORTB
0x0F81       [0]    RB2_bit
0x0F81       [0]    RB1_bit
0x0F82       [1]    PORTC
0x0F83       [1]    PORTD
0x0F84       [1]    PORTE
0x0F92       [1]    TRISA
0x0F93       [1]    TRISB
0x0F94       [1]    TRISC
0x0F95       [1]    TRISD
0x0F96       [1]    TRISE
0x0FB4       [1]    CMCON
0x0FC1       [1]    ADCON1
0x0FD5       [1]    T0CON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF1       [1]    INTCON2
0x0FF2       [0]    TMR0IE_bit
0x0FF2       [1]    INTCON
0x0FF2       [0]    INT0IE_bit
0x0FF2       [0]    TMR0IF_bit
0x0FF2       [0]    GIE_bit
0x0FF2       [0]    INT0IF_bit
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
